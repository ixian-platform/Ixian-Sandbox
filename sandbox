#!/bin/sh -e
# Copyright (C) 2017-2025 Ixian
# This file is part of Ixian DLT - www.github.com/ixian-platform/Ixian-DLT
#
# Ixian DLT is free software: you can redistribute it and/or modify
# it under the terms of the MIT License as published
# by the Open Source Initiative.
#
# Ixian DLT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.

BASENAME=ixian-base:24.04-0.3

createBase()
{
  baseExists=`docker images $BASENAME -q`
  if [ "$baseExists" = "" ]; then
    echo "Building Ixian Base $BASENAME"
    docker build -t $BASENAME ./ixian-base
  fi
}

create()
{
  echo "Creating Ixian containers..."
  createBase
  docker-compose -p ixian create
}

up()
{
  echo "Creating and starting Ixian containers..."
  createBase
  docker-compose -p ixian up --no-start
  start
}

down()
{
  echo "Stopping and removing Ixian containers..."
  docker-compose -p ixian down -v
}

clean()
{
  set +e
  echo "Ixian Sandbox containers will be removed."
  read -p "Are you sure you want to continue? (y/n): " confirmation
  if [ $confirmation = "y" ]; then
    docker-compose -p ixian down -v --remove-orphans --rmi all
  else
    exit 1
  fi
  set -e
}

start()
{
  echo "Starting Ixian containers..."
  # We need to start containers individually due to a bug in docker compose related to
  # replicas and port forwarding to host, otherwise we could just use:
  # docker-compose -p ixian start
  CONTAINER_IDS=`docker ps -a --format 'table {{.Names}}' | grep "ixian-" | sort --version-sort`
  for item in $CONTAINER_IDS
  do
    docker start "$item"
  done
}

stop()
{
  echo "Stopping Ixian containers..."
  docker-compose -p ixian stop
}

build()
{
  echo "Building Ixian containers..."
  docker-compose -p ixian build
}

execute()
{
  if [ $# -lt 2 ]; then
    echo "Exec command requires service and command parameters."
    exit 1
  fi
  service=$1
  shift
  docker-compose -p ixian exec -T $service "$@"
}

update()
{
  echo "Updating Ixian containers..."
  CONTAINER_IDS=`docker ps --format 'table {{.Names}}' | grep "ixian-" | sort --version-sort`
  for item in $CONTAINER_IDS
  do
    echo -n "Updating $item... "
    docker exec "$item" "./update.sh"
  done
  stop
  start
}

help()
{
  echo -e "\x1B[1mIxian Sandbox Help:"
  echo -e "  \x1B[1mup\t\t\x1B[0m- creates and starts the sandbox environment."
  echo -e "  \x1B[1mcreate\t\x1B[0m- creates the sandbox environment."
  echo -e "  \x1B[1mstart\t\t\x1B[0m- starts the sandbox environment."
  echo -e "  \x1B[1mstop\t\t\x1B[0m- stops the sandbox environment."
  echo -e "  \x1B[1mdown\t\t\x1B[0m- stops and destroys the sandbox environment."
  echo -e "  \x1B[1mbuild\t\t\x1B[0m- rebuilds the sandbox environment."
  echo -e "  \x1B[1mclean\t\t\x1B[0m- removes the container and deletes temporary files."
  echo -e "  \x1B[1mexec\t\t\x1B[0m- executes a shell command for the specified service."
  echo -e "  \x1B[1mupdate\t\x1B[0m- triggers update command for each service."
}

sandbox()
{
  case $1 in
    up)
      shift
      up
      ;;
			
    down)
      shift
      down
      ;;
      
    create)
      shift
      create "$@"
      ;;

    start)
      shift
      start "$@"
      ;;

    stop)
      stop
      ;;
	  
    exec)
      shift
      execute "$@"
      ;;

    build)
      build
      ;;
	  
    clean)
      clean
      ;;

    update)
      update
      ;;

    *)
      if [ $1 ]; then
        echo -e "\x1B[41mError\x1B[0m: Unknown command '$1'"
      fi
      help
      ;;
  esac
}

if ! [ -x "$(command -v docker-compose)" ]; then
  echo -e "\x1B[41mError\x1B[0m: docker-compose is not installed." >&2
  exit 1
fi

sandbox "$@"
